<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
       xmlns:p="http://www.springframework.org/schema/p"

       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://mybatis.org/schema/mybatis-spring
                        http://mybatis.org/schema/mybatis-spring.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-4.3.xsd">

    <!-- mybatis:scan会扫描com.github.mahui53541.blog.mapper包里的所有接口当作Spring的bean配置，之后可以进行依赖注入-->
    <mybatis:scan base-package="com.github.mahui53541.blog.mapper"/>

    <!-- 配置c3p0数据源 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"/>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.github.mahui53541.blog.mapper" />
    </bean>

    <bean id="vendorProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="properties">
            <props>
                <prop key="SQL Server">sqlserver</prop>
                <prop key="DB2">db2</prop>
                <prop key="SQLite">sqlite</prop>
                <prop key="SQLite">oracle</prop>
                <prop key="MySQL">mysql</prop>
                <prop key="H2">h2</prop>
            </props>
        </property>
    </bean>

    <bean id="databaseIdProvider" class="org.apache.ibatis.mapping.VendorDatabaseIdProvider">
        <property name="properties" ref="vendorProperties"/>
    </bean>
    <!-- 配置SqlSessionFactory，org.mybatis.spring.SqlSessionFactoryBean是Mybatis社区开发用于整合Spring的bean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="databaseIdProvider" ref="databaseIdProvider" />
        <property name="typeAliasesPackage" value="com.github.mahui53541.blog.po" />
        <property name="mapperLocations" value="classpath:*Mapper.xml" />
        <property name="plugins">
            <list>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <!-- 这里的几个配置主要演示如何使用，如果不理解，一定要去掉下面的配置 -->
                    <property name="properties">
                        <value>
                            helperDialect=mysql
                            reasonable=true
                            supportMethodsArguments=true
                            returnPageInfo=check
                            params=count=countSql
                            rowBoundsWithCount=true
                            offsetAsPageNum=true
                        </value>
                    </property>
                </bean>
            </list>
        </property>
    </bean>

    <!--这个插件不怎么好用-->
    <!--<bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">-->
        <!--<property name="basePackage" value="com.github.mahui53541.atm.dao"/>-->
        <!--&lt;!&ndash;&lt;!&ndash; 3.2.2版本新特性，markerInterface可以起到mappers配置的作用，详细情况需要看Marker接口类 &ndash;&gt;&ndash;&gt;-->
        <!--<property name="markerInterface" value="com.github.mahui53541.atm.util.base.BaseMapper"/>-->
        <!--&lt;!&ndash;&lt;!&ndash; 通用Mapper通过属性注入进行配置，默认不配置时会注册Mapper<T>接口 &ndash;&gt;&ndash;&gt;-->
        <!--&lt;!&ndash;<property name="properties">&ndash;&gt;-->
            <!--&lt;!&ndash;<value>&ndash;&gt;-->
                <!--&lt;!&ndash;mappers=com.github.mahui53541.atm.dao.BaseMapper&ndash;&gt;-->
            <!--&lt;!&ndash;</value>&ndash;&gt;-->
        <!--&lt;!&ndash;</property>&ndash;&gt;-->

    <!--</bean>-->
    <!-- JDBC事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:dataSource-ref="dataSource"/>

    <!-- 加载mysql数据源 -->
    <beans profile="mysql">
        <!-- 使用PropertyOverrideConfigurer后处理器加载数据源参数 -->
        <context:property-override location="classpath*:mysql-db.properties"/>
    </beans>
    <!-- 加载sqlite数据源 -->
    <beans profile="sqlite">
        <!-- 使用PropertyOverrideConfigurer后处理器加载数据源参数 -->
        <context:property-override location="classpath*:sqlite-db.properties"/>
    </beans>
</beans>